<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Sinclair User 49 - Hewson's Helpline</title>
<link rel="stylesheet" type="text/css" href="../shared/general.css">
<meta name="keywords" content="Sinclair, ZX80, ZX81, Spectrum, QL">
<meta name="description" content="Hewson's Helpline from Sinclair User, April 1986">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" alink="#FF0000" vlink="#660099">

<p align="center" class="first"><a href="adventh.htm"><img src="../shared/images/lbutton.gif" width=15 height=19 border=0 alt="Adventure Helpline"></a>
<a href="index.htm"><img src="../shared/images/hbutton.gif" width=15 height=19 border=0 alt="Issue 49 Contents"></a>
<a href="animatr.htm"><img src="../shared/images/rbutton.gif" width=15 height=19 border=0 alt="Animator 1"></a></p>

<h2 class="blackback"><i>HEWSON'S HELPLINE</i></h2>

<br clear=all>

<img src="../shared/images/hewson8.jpg" width=400 height=258 hspace=10 vspace=10 border=0 align="right" alt="Mr Hewson">

<h1><i>Inside the 128</i></h1>

<p class="first"><b><font size="+1">Hewson looks at the new RAM</font></b></p>

<p class="first">AS I WRITE Sinclair has announced its new machine. I have known about it for some time, in common with a number of other software companies in the UK. However, we have all been bound by agreements not to breathe a word about it to the public.</p>

<p>Now the gag is off I thought you might like to know a bit more about using the machine for writing programs. The principle advantages are the extra memory which is available, the second screen memory and the new sound chip.</p>

<p>The extra RAM memory is a little difficult to get at, even when writing in machine code. This is because the total of 128K of RAM is divided into eight banks of 16K but the Z80 microprocessor can only address 64K of memory at a time, and that includes the 16K of ROM at the bottom of the address space.</p>

<p>In the new computer there are ten possible banks of 16K to be addressed, two banks of ROM and eight banks of RAM. The bottom 16K of address space is always used by one or other of the two ROMs, the next 16K can only be used by RAM bank number five, the next by RAM bank number two and the top 16K by any one of the eight RAM banks. Thus it is possible, although not particularly sensible, to have either of RAM bank numbers five and two accessible to the Z80 at different places in the memory simultaneously.</p>

<p>What would be more useful would be to have any one of the eight RAM banks appearing at any one of the three possible positions above the ROM, or, better still, appearing instead of one of the ROMs. Instead we are stuck with shuffling data back and forth via the top 16K of the memory map.</p>

<p>A new facility which will be of interest to machine code programmers is the second bank of RAM which may be used to hold the screen display. In the Spectrum the screen always resides at address 16348 - hex 4000. In the new machine this part of memory is in RAM bank number five. However, the new machine also supports the use of RAM bank number seven for screen memory.</p>
 
<p>Unfortunately RAM bank number seven may only appear at the top of memory as explained above. This does suggest the possibility of building a picture off-screen and switching it in more or less instantaneously, rather than copying it laboriously to 16384.</p>

<p>Those readers who are well-informed about machine-code programming will know that, because the hardware needs to get at the screen memory to maintain the screen picture 50 times per second, programs run more slowly when placed in the lowest RAM bank. This problem affects only one of three banks of RAM in the ordinary Spectrum but four out of the eight banks in the 128.</p>

<p>The new sound chip is a great blessing because it allows the programmer to set up some effects and then go away and get on with executing some other code rather than, as with the Spectrum, forever having to go back and toggle the loudspeaker at the correct moment. The effect transmitted through the TV speaker is also rather better than the old telephone-in-a-card board-box generated by the Spectrum.</p>

<p>Of course the price to pay for better sound is the extra work involved in setting up the registers with channel, amplitude, tone and envelope data. The manufacturers have identified a n entry point in the second ROM by which the machine code programmer can access the music system provided by the new Basic Play command. That is similar in principal to the way in which RST 16 can be used in the ordinary Spectrum ROM to use the facilities of the Print command from machine code.</p>
<br clear=all>

<table border="0" cellpadding="1"><tr><td bgcolor="#000000">
<table border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#CCCCCC">
<h2><i>Numbers which won't add up</i></h2>

<p class="first">THERE'S ONE TOPIC which appears in my postbag with the same kind of regularity as those infernal competition offers from Reader's Digest. Every mortal has his cross to bear, and the rounding error seems to be mine.</p>

<p>On this particular occasion it is John Jennings of Staines who is suffering from rounding errors. He clearly did not read my article in the <a href="../002/helplne.htm">May 1982 issue</a> of Sinclair User when I first wrote about the problem! He includes a copy of the program which is giving him trouble and I have listed it in table one. The screen display when the program is executed is shown in table two.</p>

<center><table border="0" cellpadding="1"><tr><td bgcolor="#000000">
<table border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#FFFFFF">
<pre><b>Table 1. John Jennings' test program
demonstrating the effect of rounding errors</b>

10 LET X=3
20 FOR I=1 TO 10
30 LET X=X-0.5
40 PRINT X
50 IF X=2.5 THEN PRINT &quot;Two point five&quot;
60 IF X=-1 THEN PRINT &quot;Minus one&quot;
70 NEXT I</pre>
</td></tr>

<tr><td bgcolor="#FFFFFF">
<pre><b>The output from the program listed
in Table 1</b>

2.5
Two point five
2
1.5
1
0.5
2.3283064E-10
-0.5
-1
-1.5
-2</pre>
</td></tr></table>
</td></tr></table></center>

<p>John writes: <b>I typed this test program into the Spectrum Plus demonstration model at a local branch of W H Smith and got the same result as with my own machine.</b></p>

<p><b>I really want to know whether there is a fault in my machine or whether this is a quirk of the Spectrum.</b></p>

<p>It is not a fault with the machine and it is only a quirk of the Spectrum in the sense that the computer tries in a rather half-hearted fashion to hide a problem with the nature of arithmetic from ordinary users. The problem is related to the fact that it is impossible to express some fractions exactly without rounding errors.</p>

<p>For example, we all know the following statements are incorrect:</p>

<pre>1/3 = 0.3
1/3 = 0.33
1/3 = 0.333</pre>

<p>No matter how many trailing threes we place at the end of the number the result is still incorrect, even if only slightly. We are so familiar with this example that we no longer consider it worthy of comment or investigation.</p>

<p>In this regard we are no different from the ancient Romans who no doubt knew that their system of numerals was cumbersome but were happy to persist with it.</p>

<p>Unfortunately, because the decimal representation serves us well in everyday life we somehow assume that the inaccuracy in the number one-third is a property of the number rather than the method by which we choose to represent it. In fact it is easy to show that it is the method of representation which is at fault, not the number itself.</p>

<p>If we had been created with six fingers on each hand rather than five then we would presumably count in groups of 12. In maths jargon we would count to base 12. When counting to base 12 the following statement is true:</p>

<pre>1/3 = 0.4</pre>

<p>That is easy to understand if you remember that the column following the decimal point when counting in base 12 is the twelfths column, and four-twelfths equals one-third.</p>

<p>However, counting to base 12 is not immune to problems. The fraction one-fifth, for example, which is equal to 0.2 in decimal can only be exactly represented in base 12 by 0.24972497 ... followed by endless repetition of the four digits 2497.</p>

<p>No matter what base you choose there will always be some fractions which cannot be represented exactly. There are even some numbers - such as pi, the ratio of the circumference of a circle to its diameter - which cannot be exactly represented in any base.</p>

<p>Of course those inexactitudes do not normally matter because we are happy to accept a number which is approximately correct as exact The trick is to build in acceptance of tiny but irrelevant differences. In particular you should not, as John Jennings has done in line 50 and 60 of his program, demand equality in any comparison.</p>

<p>The program illustrates how the Spectrum disguises the problem of rounding errors in is printing routine except for numbers which are very close to zero. Thus we do not know if there are rounding errors in the calculation of 2, 1.5, 1, 0.5, -0.5,  -1, -1.5 and -2 because the print routine rounds off the numbers to the first half dozen or so significant figures, discarding any rounding error as it does so.</p>

<p>But the number zero has no leading significant figures by definition, so the Spectrum has no way of knowing where truth ends and rounding error begins.</p>

<p>Hence it prints what it has stored away, which is a number which is not quite zero but is smaller than one divided by a thousand million. The poor old computer, because it isn't human, doesn't realise that John Jennings is going to be very perplexed by this result.</p>
</td></tr></table>
</td></tr></table>

<br clear=all>
<br>

<table border="0" cellpadding="5" cellspacing="0"><tr><td bgcolor="#808080">
<h2><i><font color="#FFFFFF">How random is random?</font></i></h2>

<p class="first"><font color="#FFFFFF">THIS MONTH'S LOOK at the system variables focuses on the SEED variable stored at address 23670. This number is used by the RND function to kick off the next random number calculation.</font></p>

<p><font color="#FFFFFF">Creating random numbers in a computer is a funny business because strictly speaking it cannot be done at all. A computer is a machine which executes a series of stored instructions and given that the starting point is the same and the instructions are the same it will always obtain the same result. A random element is not permitted to creep in.</font></p>

<p><font color="#FFFFFF">The usual way of getting round this problem is to use a sequence of instructions, or algorithm, which when fed a number, chops it around and rearranges its component parts rather like shuffling a pack of cards. ln the jargon of the trade this is called 'hashing.'</font></p>

<p><font color="#FFFFFF">The aim is to create a pseudo random number and a seed number. The seed can then be fed through the same algorithm to produce the next random number. Sometimes the seed for the next calculation is the preceding random number. Mathematicians have had fun in the past devising a number of hashing algorithms and then proving that the sequence of numbers created by them are more or less random.</font></p>

<p><font color="#FFFFFF">The Spectrum random number generator uses the calculation:</font></p>

<pre><font color="#FFFFFF">Random number=(75*(SEED+1)-1)/65536</font></pre>

<p><font color="#FFFFFF">You can prove that by choosing some whole number as a seed and then comparing the result of the calculation with:</font></p>

<pre><font color="#FFFFFF">10 RANDOMIZE SEED
20 PRINT RND</font></pre>

<p><font color="#FFFFFF">To finish off the exercise keep an eye on the SEED system variable at address 23670. You will see that, as its name suggests, it is this location which is used to store the seed for the next calculation.</font></p>
</td></tr></table>
<br clear=all>

<center><hr width="50%" noshade></center>

<p align="center" class="first"><a href="adventh.htm"><img src="../shared/images/lbutton.gif" width=15 height=19 border=0 alt="Adventure Helpline"></a>
<a href="index.htm"><img src="../shared/images/hbutton.gif" width=15 height=19 border=0 alt="Issue 49 Contents"></a>
<a href="animatr.htm"><img src="../shared/images/rbutton.gif" width=15 height=19 border=0 alt="Animator 1"></a></p>

<h6 align="center">Sinclair User<br>April 1986</h6>

</body>
</html>