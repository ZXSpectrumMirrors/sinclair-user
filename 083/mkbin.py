asm="""
62	1	211	254	33	0	64	17	1	64	1	255	23	117	237	176	:	1516
205	116	128	221	33	111	129	6	6	197	221	86	1	221	94	0	:	1775
205	217	128	14	4	221	9	193	16	239	118	1	108	7	11	203	:	1694
120	40	251	221	33	111	129	6	6	197	205	171	128	21	80	128	:	1847
1	4	0	221	9	193	16	241	62	127	219	254	31	56	219	201	:	1854
205	97	128	221	119	2	79	205	97	128	221	119	3	177	40	240	:	2081
201	205	88	129	254	96	48	3	62	255	201	254	160	56	3	62	:	2077
1	201	175	201	1	191	255	17	0	0	205	32	129	28	16	250	:	1702
65	205	32	129	20	16	250	5	250	32	129	29	16	250	65	205	:	1698
32	129	21	16	250	4	197	205	80	129	87	205	88	129	95	205	:	1872
42	129	182	119	193	11	203	120	40	236	201	221	86	1	221	94	:	2099
0	205	217	128	221	126	2	131	95	221	126	3	130	87	205	217	:	2114
128	56	8	221	114	1	221	115	0	55	201	205	217	128	221	86	:	1977
1	221	94	0	205	217	128	167	201	213	205	42	129	17	101	129	:	2070
8	167	8	6	8	197	213	65	26	87	30	0	203	58	203	27	:	1306
16	250	122	173	119	162	186	40	3	8	55	8	35	123	174	119	:	1593
163	187	40	3	8	55	8	43	36	124	230	7	32	10	125	198	:	1269
32	111	56	4	127	214	8	103	209	193	19	16	200	8	209	201	:	1710
197	213	205	42	129	182	119	209	193	201	122	254	192	208	230	192	:	2888
31	55	31	31	170	230	248	170	103	123	7	7	7	170	230	199	:	1812
170	7	7	111	123	230	7	60	71	79	62	1	15	16	253	201	:	1413
205	88	129	254	197	48	249	201	42	109	129	35	124	230	63	103	:	2206
34	109	129	126	201	255	129	129	159	128	129	129	255	208	7	16	:	2143
48	1	255	80	9	255	0	96	9	1	1	112	159	0	255	128	:	1409
159	255	0	16	127	255	0										:	812
"""

lines = asm.split('\n')
asm = []
for line in lines:
    if not line.strip(): continue
    line = line.split('\t')
    bytes_, checksum = line[:-2], line[-1]
    bytes_ = [int(n) for n in bytes_ if n]
    checksum = int(checksum)
    asm.append((bytes_, checksum))

org = int('8000', 16)
for i, tup in enumerate(asm):
    bytes_, checksum = tup
    check = sum(bytes_)
    if check != checksum:
        print(i, hex(org)[2:].zfill(4), end=" - ")
        for byte_ in bytes_:
            print(hex(byte_)[2:].zfill(2), end=" ")
        print(':', checksum, '<>', check)
    org += len(bytes_)

with open('decompiled.ref.bin','wb') as handle:
    for bytes_, _ in asm:
        handle.write(bytes(bytes_))
